{"version":3,"sources":["install.js","App.js","serviceWorker.js","index.js"],"names":["deferredInstallPrompt","startInstallProcess","installButton","document","getElementById","window","addEventListener","e","console","debug","preventDefault","removeAttribute","style","display","prompt","userChoice","then","choiceResult","outcome","log","evt","handleFiles","files","nativeEvent","target","App","useEffect","react_default","a","createElement","react_router_dom","basename","class","href","id","aria-label","hidden","position","top","type","onChange","multiple","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","URL","process","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kLAmBIA,kCAESC,eAAsB,WAGjC,IAAMC,EAAgBC,SAASC,eAAe,cAE9CC,OAAOC,iBAAiB,sBAAuB,SAACC,GAC9CC,QAAQC,MAAM,iBAAkBF,GAGhCA,EAAEG,iBAEFV,EAAwBO,EACxBL,EAAcS,gBAAgB,YAGhCT,EAAcI,iBAAiB,QAAS,SAACC,GAEvCL,EAAcU,MAAMC,QAAU,OAE9Bb,EAAsBc,SAEtBd,EAAsBe,WACnBC,KAAK,SAACC,GACwB,aAAzBA,EAAaC,QACfV,QAAQW,IAAI,iCAEZX,QAAQW,IAAI,kCAEdnB,EAAwB,SAK9BK,OAAOC,iBAAiB,eAQxB,SAAyBc,GAEvBZ,QAAQW,IAAI,6BAA8BC,eCzDxCC,EAAc,SAACd,GACnB,IAAMe,EAAQf,EAAEgB,YAAYC,OAAOF,MACnCd,QAAQC,MAAM,SAAUa,IAwDXG,MArDf,WAOE,OALAC,oBAAU,WACRlB,QAAQW,IAAI,SACZlB,MAoBA0B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,SAAS,KACnBJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQG,MAAM,UACZL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,iCAAiCD,MAAM,cAA/C,aAIFL,EAAAC,EAAAC,cAAA,UAAQK,GAAG,aAAaC,aAAW,mBAAmBC,QAAM,GAA5D,sBAGJT,EAAAC,EAAAC,cAAA,OAAKjB,MAAO,CACVyB,SAAU,QACVC,IAAK,QAGLX,EAAAC,EAAAC,cAAA,SACEU,KAAK,OACLC,SAAUnB,EACVoB,UAAQ,QC5CdC,EAAcC,QACW,cAA7BtC,OAAOuC,SAASC,UAEa,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DAsCJ,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACThC,KAAK,SAAAqC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BnD,QAAQW,IACN,iHAKE8B,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB7C,QAAQW,IAAI,sCAGR8B,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,UAO5BS,MAAM,SAAAC,GACLvD,QAAQuD,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAAS/D,SAASC,eAAe,QAAS,cDgBnD,SAAkB6C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,oBAAwB/D,OAAOuC,SAASX,MACpDoC,SAAWhE,OAAOuC,SAASyB,OAIvC,OAGFhE,OAAOC,iBAAiB,OAAQ,WAC9B,IAAM0C,EAAK,GAAAsB,OAAMF,oBAAN,sBAEP1B,GAgEV,SAAiCM,EAAOC,GAEtCsB,MAAMvB,GACHhC,KAAK,SAAAwD,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAM9D,KAAK,SAAAqC,GACjCA,EAAa0B,aAAa/D,KAAK,WAC7BX,OAAOuC,SAASoC,aAKpBjC,EAAgBC,EAAOC,KAG1Ba,MAAM,WACLtD,QAAQW,IACN,mEArFA8D,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAM9D,KAAK,WACjCR,QAAQW,IACN,gHAMJ4B,EAAgBC,EAAOC,MCrC/BE","file":"static/js/main.73ed6ac1.chunk.js","sourcesContent":["/*\r\n * @license\r\n * Your First PWA Codelab (https://g.co/codelabs/pwa)\r\n * Copyright 2019 Google Inc. All rights reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License\r\n */\r\n\r\n\r\nlet deferredInstallPrompt;\r\n\r\nexport const startInstallProcess = () => {\r\n\r\n  // console.log('Hello in Start');\r\n  const installButton = document.getElementById('butInstall');\r\n\r\n  window.addEventListener('beforeinstallprompt', (e) => {\r\n    console.debug('Before Install', e);\r\n\r\n    // Prevent Chrome 67 and earlier from automatically showing the prompt\r\n    e.preventDefault();\r\n    // Stash the event so it can be triggered later.\r\n    deferredInstallPrompt = e;\r\n    installButton.removeAttribute('hidden');\r\n  });\r\n\r\n  installButton.addEventListener('click', (e) => {\r\n    // hide our user interface that shows our A2HS button\r\n    installButton.style.display = 'none';\r\n    // Show the prompt\r\n    deferredInstallPrompt.prompt();\r\n    // Wait for the user to respond to the prompt\r\n    deferredInstallPrompt.userChoice\r\n      .then((choiceResult) => {\r\n        if (choiceResult.outcome === 'accepted') {\r\n          console.log('User accepted the A2HS prompt');\r\n        } else {\r\n          console.log('User dismissed the A2HS prompt');\r\n        }\r\n        deferredInstallPrompt = null;\r\n      });\r\n  });\r\n\r\n  // CODELAB: Add event listener for appinstalled event\r\n  window.addEventListener('appinstalled', logAppInstalled);\r\n\r\n  /**\r\n   * Event handler for appinstalled event.\r\n   *   Log the installation to analytics or save the event somehow.\r\n   *\r\n   * @param {Event} evt\r\n   */\r\n  function logAppInstalled(evt) {\r\n    // CODELAB: Add code to log the event\r\n    console.log('Weather App was installed.', evt);\r\n  }\r\n}\r\n\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { useEffect } from 'react';\nimport { startInstallProcess } from './install';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\n\nconst handleFiles = (e) => {\n  const files = e.nativeEvent.target.files;\n  console.debug('Files ', files);\n};\n\nfunction App() {\n\n  useEffect(() => {\n    console.log('Hello')\n    startInstallProcess();\n  });\n\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n    <HashRouter basename=\"/\">\n      <div>\n        <div>\n          <header class=\"header\">\n            <h1>\n              <a href=\"https://darksky.net/poweredby/\" class=\"powered-by\">\n                Mpowered\n          </a>\n            </h1>\n            <button id=\"butInstall\" aria-label=\"Install MPowered\" hidden>Install MPowered</button>\n          </header>\n        </div>\n        <div style={{\n          position: 'fixed',\n          top: '50%'\n        }}\n        >\n          <input\n            type=\"file\"\n            onChange={handleFiles}\n            multiple\n\n          />\n        </div>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'), () => {\n\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n"],"sourceRoot":""}